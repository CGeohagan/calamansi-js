/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! regenerator-runtime */ "./node_modules/regenerator-runtime/runtime.js");


/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   true ? module.exports : undefined
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}


/***/ }),

/***/ "./src/calamansi.js":
/*!**************************!*\
  !*** ./src/calamansi.js ***!
  \**************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _calamansi_Calamansi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calamansi/Calamansi */ "./src/calamansi/Calamansi.js");
/* harmony import */ var _calamansi_CalamansiEventHub__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./calamansi/CalamansiEventHub */ "./src/calamansi/CalamansiEventHub.js");


window.Calamansi = _calamansi_Calamansi__WEBPACK_IMPORTED_MODULE_0__["default"];
window.CalamansiEvents = new _calamansi_CalamansiEventHub__WEBPACK_IMPORTED_MODULE_1__["default"]();

/***/ }),

/***/ "./src/calamansi.scss":
/*!****************************!*\
  !*** ./src/calamansi.scss ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "./src/calamansi/Calamansi.js":
/*!************************************!*\
  !*** ./src/calamansi/Calamansi.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _CalamansiAudio__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CalamansiAudio */ "./src/calamansi/CalamansiAudio.js");
/* harmony import */ var _CalamansiSkin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CalamansiSkin */ "./src/calamansi/CalamansiSkin.js");


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }


 // CBG commenting out
// import TrackInfoReader from './services/TrackInfoReader';

var Calamansi =
/*#__PURE__*/
function () {
  function Calamansi(el) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Calamansi);

    /* DATA */
    this._options = Object.assign({
      // Default options...
      loop: false,
      shuffle: false,
      volume: 100,
      preloadTrackInfo: false,
      loadTrackInfoOnPlay: true,
      defaultAlbumCover: '',
      soundcloudClientId: ''
    }, options); // Make sure we have all the required options provided and the values
    // are all correct

    try {
      this._validateOptions();
    } catch (error) {
      console.error("Calamansi intialization error: ".concat(error));
      return;
    }
    /* STATE */


    this._initialized = false; // CBG commenting out
    // this._trackInfoReader = new TrackInfoReader(this._options.soundcloudClientId);

    this.el = el;
    this.id = el.id ? el.id : this._generateUniqueId();
    this._eventListeners = {
      initialized: [],
      play: [],
      pause: [],
      stop: [],
      trackEnded: [],
      loadeddata: [],
      loadedmetadata: [],
      canplaythrough: [],
      loadingProgress: [],
      timeupdate: [],
      volumechange: [],
      ratechange: [],
      playlistLoaded: [],
      playlistReordered: [],
      playlistSwitched: [],
      trackInfoReady: [],
      trackSwitched: []
    };
    this._skin = null;
    this.audio = null;
    this._playlists = [];
    this._currentPlaylist = null;
    this._currentTrack = null;
    this._currentPlaylistOrder = [];
    /* INITIALIZE PLAYER INSTANCE */

    this._init();
  }
  /**
   * Automatically initialize all the player instances
   * 
   * @param string className = 'calamansi'
   */


  _createClass(Calamansi, [{
    key: "_validateOptions",
    value: function _validateOptions() {
      if (!this._options.skin) {
        throw 'No skin provided.';
      }
    }
  }, {
    key: "_init",
    value: function () {
      var _init2 = _asyncToGenerator(
      /*#__PURE__*/
      _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee() {
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Prepare playlists/audio source, load the first track to play
                this._preparePlaylists(); // Register internal event listeners


                this._registerEventListeners(); // Initialize the skin


                this._skin = new _CalamansiSkin__WEBPACK_IMPORTED_MODULE_2__["default"](this, this._options.skin);
                _context.next = 5;
                return this._skin.init();

              case 5:
                this.el = document.getElementById(this.id); // Initialization done!

                this._initialized = true;

                this._emit('initialized', this);

                CalamansiEvents._emit('initialized', this); // Load the first playlist with at least 1 track


                this._loadPlaylist(this.currentPlaylist());

                if (this.audio) {
                  this.audio.changeVolume(this._options.volume / 100);
                }

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function _init() {
        return _init2.apply(this, arguments);
      }

      return _init;
    }()
  }, {
    key: "_generateUniqueId",
    value: function _generateUniqueId() {
      var id = Math.random().toString(36).substr(2, 5);
      return document.querySelectorAll("calamansi-".concat(id)).length > 0 ? this._generateUniqueId() : "calamansi-".concat(id);
    }
    /**
     * Read playlist information from the provided options, select the first
     * playlist and track to be played
     */

  }, {
    key: "_preparePlaylists",
    value: function _preparePlaylists() {
      if (this._options.playlists && Object.keys(this._options.playlists).length > 0) {
        var playlistIndex = 0;

        for (var name in this._options.playlists) {
          var playlist = {
            name: name,
            list: []
          };

          if (!Array.isArray(this._options.playlists[name])) {
            continue;
          }

          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = this._options.playlists[name][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var track = _step.value;

              if (!track.source) {
                continue;
              }

              track.info = track.info ? track.info : {};
              track.info.url = track.source;
              track.info.filename = this._getTrackFilename(track);
              track.info.name = track.info.title ? track.info.title : track.info.filename;
              track.info.titleOrFilename = track.info.title ? track.info.title : track.info.filename;
              track.info.artistOrFilename = track.info.artist ? track.info.artist : track.info.filename;
              track.sourceType = this._getTrackSourceType(track);
              playlist.list.push(track); // Load track info

              if (this._options.preloadTrackInfo) {
                this._loadTrackInfo(track);
              } // Set the first playlist with at least 1 track as the
              // current playlist


              if (this._currentPlaylist === null) {
                this._currentPlaylist = playlistIndex;
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          this._playlists.push(playlist);

          playlistIndex++;
        } // If no tracks were found - set the first playlist as the current


        if (this._currentPlaylist === null) {
          this._currentPlaylist = 0;
        }
      }
    }
  }, {
    key: "_loadPlaylist",
    value: function _loadPlaylist(playlist) {
      if (!playlist) {
        return;
      }

      if (this._options.shuffle) {
        this._shuffleCurrentPlaylist(false);
      } else {
        this._unshuffleCurrentPlaylist(false);
      }

      this.switchTrack(0);

      this._emit('playlistLoaded', this);

      CalamansiEvents._emit('playlistLoaded', this);
    }
    /**
     * Switch to a playlist by index
     * 
     * @param int index
     */

  }, {
    key: "switchPlaylist",
    value: function switchPlaylist(index) {
      this._currentPlaylist = index;

      this._emit('playlistSwitched', this);

      CalamansiEvents._emit('playlistSwitched', this); // Load the first track to play


      this._loadPlaylist(this.currentPlaylist());
    }
  }, {
    key: "_loadTrack",
    value: function _loadTrack(track) {
      if (!this.audio) {
        this.audio = new _CalamansiAudio__WEBPACK_IMPORTED_MODULE_1__["default"](this, track.source);

        if (this._options.loadTrackInfoOnPlay) {
          this._loadTrackInfo(track);
        }

        return;
      }

      this.audio.load(track.source);

      if (this._options.loadTrackInfoOnPlay) {
        this._loadTrackInfo(track);
      }
    }
    /**
     * Switch to a track by index
     * 
     * @param int index
     * @param boolean startPlaying = false
     */

  }, {
    key: "switchTrack",
    value: function switchTrack(index) {
      var startPlaying = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      this._currentTrack = index;

      this._emit('trackSwitched', this);

      CalamansiEvents._emit('trackSwitched', this); // Load the first track to play


      this._loadTrack(this.currentTrack());

      if (startPlaying) {
        this.audio.play();
      }
    }
  }, {
    key: "_getTrackFilename",
    value: function _getTrackFilename(track) {
      if (track.source.startsWith('https://api.soundcloud.com')) {
        return track.source;
      }

      return track.source.split('/').pop();
    }
  }, {
    key: "_getTrackSourceType",
    value: function _getTrackSourceType(track) {
      if (track.source.startsWith('https://api.soundcloud.com')) {
        return 'soundcloud';
      }

      return track.info.filename.split('.').pop();
    }
  }, {
    key: "_loadTrackInfo",
    value: function _loadTrackInfo(track) {
      if (track.info._loaded === true) {
        return;
      } // CBG commenting out
      // this._trackInfoReader.read(track)
      //     .then(trackInfo => {
      //         if (!trackInfo._loaded) {
      //             return;
      //         }
      //         track.info = Object.assign(track.info, trackInfo);
      //         this._emit('trackInfoReady', this, track);
      //         CalamansiEvents._emit('trackInfoReady', this);
      //     });

    }
    /**
     * Get the current playlist
     */

  }, {
    key: "currentPlaylist",
    value: function currentPlaylist() {
      return this._playlists[this._currentPlaylist];
    }
    /**
     * Get the current track
     */

  }, {
    key: "currentTrack",
    value: function currentTrack() {
      return this.currentPlaylist() ? this.currentPlaylist().list[this._currentPlaylistOrder[this._currentTrack]] : null;
    }
    /**
     * Switch to the next track
     */

  }, {
    key: "nextTrack",
    value: function nextTrack() {
      if (this._currentTrack + 1 < this.currentPlaylist().list.length) {
        this.switchTrack(this._currentTrack + 1, true);
        return true;
      } else {
        if (this._options.loop) {
          this.switchTrack(0, true);
          return true;
        }
      }

      return false;
    }
    /**
     * Switch to the previous track
     */

  }, {
    key: "prevTrack",
    value: function prevTrack() {
      if (this._currentTrack - 1 >= 0) {
        this.switchTrack(this._currentTrack - 1, true);
        return true;
      } else {
        if (this._options.loop) {
          this.switchTrack(this.currentPlaylist().list.length - 1, true);
          return true;
        }
      }

      return false;
    }
    /**
     * Toggle playlist loop
     */

  }, {
    key: "toggleLoop",
    value: function toggleLoop() {
      this._options.loop = !this._options.loop;
    }
    /**
     * Toggle playlist shuffle
     */

  }, {
    key: "toggleShuffle",
    value: function toggleShuffle() {
      this._options.shuffle = !this._options.shuffle;

      if (this._options.shuffle) {
        this._shuffleCurrentPlaylist();
      } else {
        this._unshuffleCurrentPlaylist();
      }
    }
  }, {
    key: "_unshuffleCurrentPlaylist",
    value: function _unshuffleCurrentPlaylist() {
      var _emitEvent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      this._currentTrack = this._currentPlaylistOrder[this._currentTrack];
      this._currentPlaylistOrder = Object.keys(this.currentPlaylist().list).map(function (i) {
        return parseInt(i);
      });

      if (_emitEvent) {
        this._emit('playlistReordered', this);

        CalamansiEvents._emit('playlistReordered', this);
      }
    }
  }, {
    key: "_shuffleCurrentPlaylist",
    value: function _shuffleCurrentPlaylist() {
      var _emitEvent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      if (this.currentPlaylist().list.length > 1) {
        this._currentPlaylistOrder = [];

        while (this._currentPlaylistOrder.length < this.currentPlaylist().list.length) {
          var order = Math.floor(Math.random() * this.currentPlaylist().list.length);

          if (this._currentPlaylistOrder.indexOf(order) > -1) {
            continue;
          }

          this._currentPlaylistOrder.push(order);
        }

        this._currentTrack = this._currentPlaylistOrder.indexOf(this._currentTrack);
      } else {
        this._currentPlaylistOrder = [0];
      }

      if (_emitEvent) {
        this._emit('playlistReordered', this);

        CalamansiEvents._emit('playlistReordered', this);
      }
    }
    /**
     * Destroy the player instance
     */

  }, {
    key: "destroy",
    value: function destroy() {
      this.audio.unload();

      this._skin.destroy();
    }
    /**
     * Register an event listener (subscribe to an event)
     * 
     * @param string|array events
     * @param function callback 
     */

  }, {
    key: "on",
    value: function on(events, callback) {
      if (typeof events === 'string') {
        events = [events];
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = events[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var event = _step2.value;

          // Ignore inexisting event types
          if (!this._eventListeners[event]) {
            continue;
          }

          this._eventListeners[event].push(callback);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
    /**
     * _Emit an event. Call all the event listeners' callbacks.
     * 
     * @param {*} event 
     * @param {*} data 
     * @param {*} data 
     */

  }, {
    key: "_emit",
    value: function _emit(event, instance) {
      var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // Sometimes the player initialization might fail
      if (!this._initialized) {
        return;
      } // Ignore inexisting event types


      if (!this._eventListeners[event]) {
        return;
      }

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = this._eventListeners[event][Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var callback = _step3.value;
          callback(instance, data);
        } // DOM elements visibility can be dependent on events

      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
            _iterator3["return"]();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      document.querySelectorAll("#".concat(this._skin.el.id, " .clmns--hide-on-").concat(event)).forEach(function (el) {
        if (el.style.display == 'none') {
          return;
        }

        el.dataset.display = el.style.display ? el.style.display : 'flex';
        el.style.display = 'none';
      });
      document.querySelectorAll("#".concat(this._skin.el.id, " .clmns--show-on-").concat(event)).forEach(function (el) {
        el.style.display = el.dataset.display;
      });
    }
  }, {
    key: "_registerEventListeners",
    value: function _registerEventListeners() {
      var _this = this;

      CalamansiEvents.on('play', function (instance) {
        // Pause all players when one of the players on the page has started
        // playing
        if (instance.id != _this.id) {
          if (_this.audio) {
            _this.audio.pause();
          }
        }
      });
      this.on('trackEnded', function (instance) {
        if (!_this.nextTrack()) {
          _this._emit('stop');

          CalamansiEvents._emit('stop', _this);
        }
      });
    }
  }], [{
    key: "autoload",
    value: function autoload() {
      var _this2 = this;

      var className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'calamansi';
      var calamansis = [];
      var elements = document.querySelectorAll(".".concat(className)); // Initialize all the player instances

      elements.forEach(function (el) {
        calamansis.push(new Calamansi(el, _this2._readOptionsFromElement(el)));
      });
      return calamansis;
    }
    /**
     * Read options from a DOM element for autoloaded instances
     * 
     * @param {*} el 
     */

  }, {
    key: "_readOptionsFromElement",
    value: function _readOptionsFromElement(el) {
      var options = {};
      options.skin = el.dataset.skin ? el.dataset.skin : null;

      if (el.dataset.source) {
        options.playlists = {
          'default': [{
            source: el.dataset.source
          }]
        };
      }

      return options;
    }
  }]);

  return Calamansi;
}();

/* harmony default export */ __webpack_exports__["default"] = (Calamansi);

/***/ }),

/***/ "./src/calamansi/CalamansiAudio.js":
/*!*****************************************!*\
  !*** ./src/calamansi/CalamansiAudio.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var CalamansiAudio =
/*#__PURE__*/
function () {
  function CalamansiAudio(calamansi, source) {
    _classCallCheck(this, CalamansiAudio);

    this._calamansi = calamansi;
    this.audio = new Audio();
    this.load(source); // Metadata

    this.duration = 0; // State

    this.loadedPercent = 0.0;
    this.currentTime = 0;
    this.volume = this.audio.volume;
    this.playbackRate = 1.0;

    this._addEventListeners();
  }

  _createClass(CalamansiAudio, [{
    key: "_addEventListeners",
    value: function _addEventListeners() {
      var _this = this;

      this.audio.addEventListener('loadedmetadata', function (event) {
        _this.duration = _this.audio.duration;
        _this._calamansi.currentTrack().info.duration = _this.audio.duration;

        _this._calamansi._emit('loadedmetadata', _this._calamansi);

        CalamansiEvents._emit('loadedmetadata', _this._calamansi);
      }); // Fired when the first frame of the media has finished loading.

      this.audio.addEventListener('loadeddata', function (event) {
        _this._setCurrentTime(_this.audio.currentTime);

        _this._calamansi._emit('loadeddata', _this._calamansi);

        CalamansiEvents._emit('loadeddata', _this._calamansi);
      }); // Data loading progress

      this.audio.addEventListener('progress', function (event, progress) {// NOTE: There seems to be no way to actually determine how much has
        // been loaded
      }); // Data has been fully loaded till the end

      this.audio.addEventListener('canplaythrough', function (event) {
        _this.loadedPercent = 100;

        _this._calamansi._emit('canplaythrough', _this._calamansi);

        CalamansiEvents._emit('canplaythrough', _this._calamansi);

        _this._calamansi._emit('loadingProgress', _this._calamansi);

        CalamansiEvents._emit('loadingProgress', _this._calamansi);
      });
      this.audio.addEventListener('timeupdate', function (event) {
        _this._setCurrentTime(_this.audio.currentTime);
      });
      this.audio.addEventListener('ended', function (event) {
        _this._setCurrentTime(0);

        CalamansiEvents._emit('trackEnded', _this._calamansi);

        _this._calamansi._emit('trackEnded', _this._calamansi);
      });
    }
    /**
     * Load an audio track from a source
     * 
     * @param string source 
     */

  }, {
    key: "load",
    value: function load(source) {
      this.stop();

      if (source.startsWith('https://api.soundcloud.com')) {
        if (source.endsWith('/')) {
          source = source.substring(0, source.length - 1);
        }

        if (!this._calamansi._options.soundcloudClientId) {
          console.error('Please set your SoundCloud client id in the soundcloudClientId option to play SoundCloud tracks.');
        }

        source += '/stream?client_id=' + this._calamansi._options.soundcloudClientId;
      }

      this.audio.src = source;
      this.audio.load();
    }
    /**
     * Start playing the current track from the start
     */

  }, {
    key: "playFromStart",
    value: function playFromStart() {
      this.audio.pause();
      this.audio.currentTime = 0;
      this.currentTime = 0;
      this.audio.play();

      this._calamansi._emit('play', this._calamansi);

      CalamansiEvents._emit('play', this._calamansi);
    }
    /**
     * Start/resume playback of the current track
     */

  }, {
    key: "play",
    value: function play() {
      this.audio.play();

      this._calamansi._emit('play', this._calamansi);

      CalamansiEvents._emit('play', this._calamansi);
    }
    /**
     * Pause playback of the current track
     */

  }, {
    key: "pause",
    value: function pause() {
      this.audio.pause();

      this._calamansi._emit('pause', this._calamansi);

      CalamansiEvents._emit('pause', this._calamansi);
    }
    /**
     * Stop playback of the current track
     */

  }, {
    key: "stop",
    value: function stop() {
      this.audio.pause();
      this.audio.currentTime = 0;
      this.currentTime = 0;

      this._calamansi._emit('stop', this._calamansi);

      CalamansiEvents._emit('stop', this._calamansi);
    }
    /**
     * Unload the currently loaded audio
     */

  }, {
    key: "unload",
    value: function unload() {
      this.audio.pause();
      this.audio.removeAttribute('src');
      this.audio.load();
    }
  }, {
    key: "_setCurrentTime",
    value: function _setCurrentTime(time) {
      this.currentTime = time;

      this._calamansi._emit('timeupdate', this._calamansi);

      CalamansiEvents._emit('timeupdate', this._calamansi);
    }
    /**
     * Seek to a position
     * 
     * @param int time (seconds)
     */

  }, {
    key: "seekTo",
    value: function seekTo(time) {
      var currentTime = this.audio.currentTime;
      var updatedTime = currentTime + time;

      if (updatedTime < 0) {
        updatedTime = 0;
      } else if (updatedTime > this.audio.duration) {
        updatedTime = this.audio.duration;
      }

      this.audio.currentTime = updatedTime;

      this._setCurrentTime(updatedTime);
    }
    /**
     * Set player's volume
     * 
     * @param float volume [0.0-1.0]
     */

  }, {
    key: "changeVolume",
    value: function changeVolume(volume) {
      volume = volume >= 0 ? volume : 0;
      volume = volume <= 1 ? volume : 1;
      this.audio.volume = volume;
      this.volume = volume;

      this._calamansi._emit('volumechange', this._calamansi);

      CalamansiEvents._emit('volumechange', this._calamansi);
    }
    /**
     * Set player's playback rate
     * 
     * @param float rate [0.0-1.0]
     */

  }, {
    key: "changePlaybackRate",
    value: function changePlaybackRate(rate) {
      this.playbackRate = rate;
      this.audio.playbackRate = rate;

      this._calamansi._emit('ratechange', this._calamansi);

      CalamansiEvents._emit('ratechange', this._calamansi);
    }
  }]);

  return CalamansiAudio;
}();

/* harmony default export */ __webpack_exports__["default"] = (CalamansiAudio);

/***/ }),

/***/ "./src/calamansi/CalamansiEventHub.js":
/*!********************************************!*\
  !*** ./src/calamansi/CalamansiEventHub.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var CalamansiEventHub =
/*#__PURE__*/
function () {
  function CalamansiEventHub() {
    _classCallCheck(this, CalamansiEventHub);

    this.eventListeners = {
      initialized: [],
      play: [],
      pause: [],
      stop: [],
      trackEnded: [],
      loadeddata: [],
      loadedmetadata: [],
      canplaythrough: [],
      loadingProgress: [],
      timeupdate: [],
      volumechange: [],
      ratechange: [],
      playlistLoaded: [],
      playlistReordered: [],
      trackInfoReady: [],
      trackSwitched: []
    };
  }
  /**
   * Emit an event. Call all the event listeners' callbacks.
   * 
   * @param {*} event 
   * @param {*} instance
   * @param {*} data 
   */


  _createClass(CalamansiEventHub, [{
    key: "_emit",
    value: function _emit(event, instance) {
      var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // Ignore inexisting event types
      if (!this.eventListeners[event]) {
        return;
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.eventListeners[event][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var callback = _step.value;
          callback(instance, data);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
    /**
     * Register an event listener
     * 
     * @param {*} event 
     * @param {*} callback 
     */

  }, {
    key: "on",
    value: function on(events, callback) {
      if (typeof events === 'string') {
        events = [events];
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = events[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var event = _step2.value;

          // Ignore inexisting event types
          if (!this.eventListeners[event]) {
            continue;
          }

          this.eventListeners[event].push(callback);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  }]);

  return CalamansiEventHub;
}();

/* harmony default export */ __webpack_exports__["default"] = (CalamansiEventHub);

/***/ }),

/***/ "./src/calamansi/CalamansiSkin.js":
/*!****************************************!*\
  !*** ./src/calamansi/CalamansiSkin.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var CalamansiSkin =
/*#__PURE__*/
function () {
  function CalamansiSkin(calamansi, path) {
    _classCallCheck(this, CalamansiSkin);

    this.calamansi = calamansi;
    this.path = path;
    this.content = '';
    this.el = calamansi.el; // State

    this.mouseDownTarget = null;
  }

  _createClass(CalamansiSkin, [{
    key: "init",
    value: function () {
      var _init = _asyncToGenerator(
      /*#__PURE__*/
      _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee() {
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Load and apply the skin
                // CBG removing where we load skin
                // this.content = await this.load();
                // Set UI elements
                this.setUiElements(); // Activate the player's controls

                this.activateControls(); // Register event listeners

                this.addEventListeners();

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function init() {
        return _init.apply(this, arguments);
      }

      return init;
    }()
  }, {
    key: "load",
    value: function () {
      var _load = _asyncToGenerator(
      /*#__PURE__*/
      _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee2() {
        var skin, content, wrapper;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.loadCss(this.path);
                _context2.next = 3;
                return this.fetchHtml(this.path);

              case 3:
                skin = _context2.sent;
                content = this.el.innerHTML; // Prepare the DOM for the player instance using the skin's HTML

                wrapper = document.createElement('div');
                wrapper.innerHTML = skin.trim();

                if (wrapper.firstChild.dataset.noWrapper) {
                  wrapper = wrapper.firstChild;
                  delete wrapper.dataset.noWrapper;
                }

                wrapper.classList.add('calamansi');
                wrapper.id = this.calamansi.id; // Replace the provided element with the compiled HTML

                this.el.parentNode.replaceChild(wrapper, this.el);
                this.el = wrapper; // Load the JS after all the new elements have been appended
                // Wait for it to load and execute

                _context2.next = 14;
                return this.loadJs(this.path);

              case 14:
                return _context2.abrupt("return", content);

              case 15:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function load() {
        return _load.apply(this, arguments);
      }

      return load;
    }()
    /**
     * Append a <link> with the skin's CSS to the page if this skin's CSS has
     * not been appended yet
     * 
     * @param {*} path 
     */

  }, {
    key: "loadCss",
    value: function loadCss(path) {
      var cssPath = "".concat(path, "/skin.css"); // If the skin's CSS has already been loaded

      if (document.querySelectorAll("link[href=\"".concat(cssPath, "\"]")).length > 0) {
        return;
      }

      var link = document.createElement('link');
      link.rel = 'stylesheet';
      link.href = cssPath;
      document.querySelector('head').appendChild(link);
    }
    /**
     * Append a <script> with the skin's JS to the page if this skin's JS has
     * not been appended yet
     * 
     * @param {*} path 
     */

  }, {
    key: "loadJs",
    value: function loadJs(path) {
      var _this = this;

      return new Promise(function (resolve, reject) {
        var jsPath = "".concat(path, "/skin.js"); // If the skin's JS has already been loaded

        var script = document.querySelectorAll("script[src=\"".concat(jsPath, "\"]"));

        if (script.length > 0 && script[0].dataset.loaded) {
          // Script already exists and is loaded
          resolve();
        } else if (script.length > 0) {
          // Script already exists but hasn't been loaded - try again later
          setTimeout(function () {
            resolve(_this.loadJs(path));
          }, 100);
        } else {
          // Script doesn't exist
          script = document.createElement('script');

          script.onload = function () {
            script.dataset.loaded = '1';
            resolve();
          };

          script.setAttribute('src', jsPath);
          document.querySelector('head').appendChild(script);
        }
      });
    }
  }, {
    key: "fetchHtml",
    value: function () {
      var _fetchHtml = _asyncToGenerator(
      /*#__PURE__*/
      _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee3(path) {
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt("return", fetch("".concat(path, "/skin.html")).then(function (data) {
                  if (data.status != 200) {
                    throw "Skin at path \"".concat(path, "\" not found!");
                  }

                  return data.text();
                }).then(function (html) {
                  html = html.trim(); // Remove all the new lines

                  while (html.search("\n") >= 0) {
                    html = html.replace(/\n/, '');
                  } // Remove all the double spaces


                  while (html.search('  ') >= 0) {
                    html = html.replace(/  /, '');
                  }

                  return html;
                }));

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function fetchHtml(_x) {
        return _fetchHtml.apply(this, arguments);
      }

      return fetchHtml;
    }()
  }, {
    key: "setUiElements",
    value: function setUiElements() {
      var _this2 = this;

      // Insert the element's content inside the skin's content slot
      var contentSlots = document.querySelectorAll("#".concat(this.el.id, " .clmns--slot--content"));

      if (contentSlots && contentSlots.length > 0) {
        contentSlots.forEach(function (slot) {
          slot.innerHTML = _this2.content;
        });
      }

      this.updateCheckboxes(); // Update the list of playlist

      this.updatePlaylistList(); // Set up the playlist

      this.updatePlaylist(); // Set the track info fields

      this.updateTrackInfo();
    }
  }, {
    key: "activateControls",
    value: function activateControls() {
      var _this3 = this;

      this.el.addEventListener('mousedown', function (event) {
        _this3.mouseDownTarget = event.target;
      });
      document.addEventListener('mouseup', function (event) {
        _this3.mouseDownTarget = null;
      });
      this.el.addEventListener('touchstart', function (event) {
        _this3.mouseDownTarget = event.target;
      });
      document.addEventListener('touchend', function (event) {
        _this3.mouseDownTarget = null;
      });
      this.el.addEventListener('click', function (event) {
        if (event.target.type !== 'checkbox' && !event.target.classList.contains('clmns--link')) {
          event.preventDefault();
        } // Audio (playback) controls


        if (_this3.calamansi.audio) {
          if (_this3.containsClass(event.target, 'clmns--control-play')) {
            // "Play" button - start playback from 00:00
            _this3.calamansi.audio.playFromStart();
          } else if (_this3.containsClass(event.target, 'clmns--control-resume')) {
            // "Play" button - start or resume playback
            _this3.calamansi.audio.play();
          } else if (_this3.containsClass(event.target, 'clmns--control-pause')) {
            // "Pause" button
            _this3.calamansi.audio.pause();
          } else if (_this3.containsClass(event.target, 'clmns--control-stop')) {
            // "Stop" button
            _this3.calamansi.audio.stop();
          } else if (_this3.containsClass(event.target, 'clmns--control-next-track')) {
            // "Next Track" button
            _this3.calamansi.nextTrack();
          } else if (_this3.containsClass(event.target, 'clmns--control-prev-track')) {
            // "Previoud Track" button
            _this3.calamansi.prevTrack();
          } else if (_this3.containsClass(event.target, 'clmns--control-toggle-loop')) {
            // "Loop" button (checkbox)
            _this3.calamansi.toggleLoop();
          } else if (_this3.containsClass(event.target, 'clmns--control-toggle-shuffle')) {
            // "Shuffle" button (checkbox)
            _this3.calamansi.toggleShuffle();
          } else if (_this3.containsClass(event.target, 'clmns--slider')) {
            var parent = _this3.findElParent(event.target, 'clmns--slider');

            var position;

            if (parent.classList.contains('clmns--slider-vertical')) {
              position = 1 - (event.clientY - parent.getBoundingClientRect().y) / parent.clientHeight;
            } else {
              position = (event.clientX - parent.getBoundingClientRect().x) / parent.clientWidth;
            }

            _this3.onSliderPositionChanged(parent, position);
          }
        }
      });
      document.addEventListener('mousemove', function (event) {
        // Audio (playback) controls
        if (_this3.calamansi.audio && _this3.mouseDownTarget) {
          if (_this3.containsClass(_this3.mouseDownTarget, 'clmns--slider')) {
            // Smooth seeking
            var parent = _this3.findElParent(_this3.mouseDownTarget, 'clmns--slider');

            var position;

            if (parent.classList.contains('clmns--slider-vertical')) {
              position = 1 - (event.clientY - parent.getBoundingClientRect().y) / parent.clientHeight;
            } else {
              position = (event.clientX - parent.getBoundingClientRect().x) / parent.clientWidth;
            }

            if (position > 1.0) {
              position = 1;
            } else if (position < 0) {
              position = 0;
            }

            _this3.onSliderPositionChanged(parent, position);
          }
        }
      });
      document.addEventListener('touchmove', function (event) {
        // Audio (playback) controls
        if (_this3.calamansi.audio && _this3.mouseDownTarget) {
          if (_this3.containsClass(_this3.mouseDownTarget, 'clmns--slider')) {
            // Smooth seeking
            var parent = _this3.findElParent(_this3.mouseDownTarget, 'clmns--slider');

            var position;

            if (parent.classList.contains('clmns--slider-vertical')) {
              position = 1 - (event.touches[0].clientY - parent.getBoundingClientRect().y) / parent.clientHeight;
            } else {
              position = (event.touches[0].clientX - parent.getBoundingClientRect().x) / parent.clientWidth;
            }

            if (position > 1.0) {
              position = 1;
            } else if (position < 0) {
              position = 0;
            }

            _this3.onSliderPositionChanged(parent, position);
          }
        }
      });
      this.getEls('.clmns--playback-rate').forEach(function (el) {
        el.addEventListener('change', function (event) {
          if (_this3.calamansi.audio) {
            _this3.calamansi.audio.changePlaybackRate(parseFloat(el.value));
          }
        });
      });
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      var _this4 = this;

      this.calamansi.on('loadedmetadata', function (instance) {
        _this4.updatePlaybackDuration(instance.audio.duration);

        _this4.updatePlaylist();
      });
      this.calamansi.on('timeupdate', function (instance) {
        _this4.updatePlaybackTime(instance.audio.currentTime);

        _this4.updatePlaybackTimeLeft(instance.audio.currentTime, instance.audio.duration);

        _this4.updatePlaybackProgress(instance.audio.currentTime, instance.audio.duration);
      });
      this.calamansi.on('loadingProgress', function (instance) {
        _this4.updateLoadingProgress(instance.audio.loadedPercent);
      });
      this.calamansi.on('volumechange', function (instance) {
        _this4.updateVolume(instance.audio.volume);
      });
      this.calamansi.on('trackInfoReady', function (instance, track) {
        if (instance.currentTrack().source === track.source) {
          _this4.updateTrackInfo();
        }

        _this4.updatePlaylist();
      });
      this.calamansi.on('playlistLoaded', function (instance) {
        _this4.updatePlaylist();
      });
      this.calamansi.on('playlistReordered', function (instance) {
        _this4.updatePlaylist();
      });
      this.calamansi.on('trackSwitched', function (instance) {
        _this4.updateTrackInfo();

        _this4.updatePlaylistActiveTrack();
      });
    }
    /**
     * Updating the UI
     */

  }, {
    key: "getEl",
    value: function getEl(selector) {
      return this.el.querySelector("".concat(selector));
    }
  }, {
    key: "getEls",
    value: function getEls(selector) {
      return this.el.querySelectorAll("#".concat(this.el.id, " ").concat(selector));
    }
  }, {
    key: "findEl",
    value: function findEl(item, selector) {
      return item.querySelector(selector);
    }
  }, {
    key: "findEls",
    value: function findEls(item, selector) {
      return item.querySelectorAll(selector);
    }
  }, {
    key: "findElParent",
    value: function findElParent(item, className) {
      if (!item.classList) {
        return null;
      }

      if (item.classList.contains(className)) {
        return item;
      }

      if (!item.parentNode) {
        return null;
      }

      return this.findElParent(item.parentNode, className);
    }
  }, {
    key: "containsClass",
    value: function containsClass(el, className) {
      return el.classList.contains(className) || this.findElParent(el, className);
    }
  }, {
    key: "onSliderPositionChanged",
    value: function onSliderPositionChanged(el, position) {
      if (el.classList.contains('clmns--playback-bar')) {
        this.calamansi.audio.seekTo(position * this.calamansi.audio.duration);
      } else if (el.classList.contains('clmns--volume-bar')) {
        this.calamansi.audio.changeVolume(position);
      }
    }
  }, {
    key: "updatePlaybackDuration",
    value: function updatePlaybackDuration(duration) {
      var _this5 = this;

      this.getEls('.clmns--playback-duration').forEach(function (el) {
        el.innerText = _this5.formatTime(duration);
      });
    }
  }, {
    key: "updatePlaybackTime",
    value: function updatePlaybackTime(currentTime) {
      var _this6 = this;

      this.getEls('.clmns--playback-time').forEach(function (el) {
        el.innerText = _this6.formatTime(currentTime);
      });
    }
  }, {
    key: "updatePlaybackTimeLeft",
    value: function updatePlaybackTimeLeft(time, duration) {
      var _this7 = this;

      this.getEls('.clmns--playback-time-left').forEach(function (el) {
        var timeLeft = duration - Math.floor(time);
        el.innerText = '-' + _this7.formatTime(timeLeft);
      });
    }
  }, {
    key: "updatePlaybackProgress",
    value: function updatePlaybackProgress(time, duration) {
      var _this8 = this;

      var progress = time / duration * 100;
      this.getEls('.clmns--playback-progress').forEach(function (el) {
        var parent = _this8.findElParent(el, 'clmns--slider');

        if (!parent) {
          return;
        }

        el.style[parent.classList.contains('clmns--slider-vertical') ? 'height' : 'width'] = progress + '%';
      });
      this.getEls('.clmns--playback-bar').forEach(function (el) {
        el.title = "".concat(_this8.formatTime(_this8.calamansi.audio.currentTime), " / ").concat(_this8.formatTime(_this8.calamansi.audio.duration));
      });
    }
  }, {
    key: "updateLoadingProgress",
    value: function updateLoadingProgress(progress) {
      this.getEls('.clmns--playback-load').forEach(function (el) {
        el.style.width = progress + '%';
      });
    }
  }, {
    key: "updateVolume",
    value: function updateVolume(volume) {
      var _this9 = this;

      var els = this.getEls('.clmns--volume-value');
      els.forEach(function (el) {
        var parent = _this9.findElParent(el, 'clmns--slider');

        if (!parent) {
          return;
        }

        el.style[parent.classList.contains('clmns--slider-vertical') ? 'height' : 'width'] = volume * 100 + '%';
      });
    }
  }, {
    key: "formatTime",
    value: function formatTime(seconds) {
      var hours = seconds > 1 ? Math.floor(seconds / 60 / 60) : 0;
      var minutes = seconds > 1 ? Math.floor(seconds / 60) : 0;

      if (minutes >= 60) {
        minutes -= hours * 60;
      }

      seconds = Math.floor(seconds);

      if (seconds >= 60) {
        seconds -= minutes * 60;
      } // Add trailing zeros if required


      if (seconds < 10) {
        seconds = "0".concat(seconds);
      }

      if (minutes < 10) {
        minutes = "0".concat(minutes);
      }

      if (hours < 10) {
        hours = "0".concat(hours);
      }

      return hours != 0 ? "".concat(hours, ":").concat(minutes, ":").concat(seconds) : "".concat(minutes, ":").concat(seconds);
    }
  }, {
    key: "updateCheckboxes",
    value: function updateCheckboxes() {
      var _this10 = this;

      var el; // "Loop"

      this.getEls('.clmns--control-toggle-loop').forEach(function (el) {
        el.checked = _this10.calamansi._options.loop;
      }); // "Shuffle"

      this.getEls('.clmns--control-toggle-shuffle').forEach(function (el) {
        el.checked = _this10.calamansi._options.shuffle;
      });
    }
  }, {
    key: "updatePlaylistList",
    value: function updatePlaylistList() {
      var _this11 = this;

      var el = this.getEl('.clmns--playlists');

      if (!el) {
        return;
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = el.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var child = _step.value;
          el.removeChild(child);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      for (var index in this.calamansi._playlists) {
        var playlist = this.calamansi._playlists[index];
        var option = document.createElement('option');
        option.value = index;
        option.innerText = playlist.name;
        el.appendChild(option);
      }

      el.addEventListener('change', function (event) {
        _this11.calamansi.switchPlaylist(el.value);
      });
    }
  }, {
    key: "updatePlaylist",
    value: function updatePlaylist() {
      var _this12 = this;

      if (!this.calamansi.currentPlaylist()) {
        return;
      }

      this.getEls('.clmns--playlist').forEach(function (el) {
        if (el.nodeName.toLowerCase() === 'table') {
          _this12.updatePlaylistTable(el);
        } else {
          _this12.updatePlaylistUl(el);
        }
      });
    }
  }, {
    key: "updatePlaylistUl",
    value: function updatePlaylistUl(container) {
      var _this13 = this;

      // Remove the current list
      if (container.querySelector('ul')) {
        container.removeChild(container.querySelector('ul'));
      }

      var ul = document.createElement('ul');
      var template = this.findEl(container, '.clmns--playlist-item.clmns--template');

      if (template) {
        template = template.cloneNode(true);
        template.classList.remove('clmns--template');
      }

      var index = 0;
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = this.calamansi._currentPlaylistOrder[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var i = _step2.value;
          var track = this.calamansi.currentPlaylist().list[i];
          var info = track.info;
          var li = document.createElement('li');

          if (template) {
            var item = template.cloneNode(true);
            this.updateFields(item, 'clmns--playlist-track-info', info);

            if (track === this.calamansi.currentTrack()) {
              item.classList.add('clmns--active');
            }

            li.appendChild(item);
          } else {
            li.innerText = track.info.name;
            li.title = track.info.name;
          }

          li.classList.add('clmns--playlist-item-li');
          li.dataset.index = index;
          li.addEventListener('click', function (event) {
            if (event.target.classList.contains('clmns--link')) {
              return;
            }

            var el = _this13.findElParent(event.target, 'clmns--playlist-item-li');

            _this13.calamansi.switchTrack(parseInt(el.dataset.index), true);
          });
          ul.appendChild(li);
          index++;
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      container.appendChild(ul);
    }
  }, {
    key: "updatePlaylistTable",
    value: function updatePlaylistTable(table) {
      var _this14 = this;

      // TODO: tbody - remove all <tr> children
      var tbody = this.findEl(table, 'tbody');

      if (!tbody) {
        console.error('.clmns--playlist element should contain <tbody> with a template row!');
        return;
      }

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = this.findEls(tbody, 'tr')[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var el = _step3.value;

          if (!el.classList.contains('clmns--template')) {
            tbody.removeChild(el);
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
            _iterator3["return"]();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      var template = this.findEl(tbody, '.clmns--playlist-item.clmns--template');

      if (!template) {
        console.error('.clmns--playlist element should contain a row template!');
        return;
      }

      var index = 0;
      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = this.calamansi._currentPlaylistOrder[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var i = _step4.value;
          var track = this.calamansi.currentPlaylist().list[i];
          var info = track.info;
          var tr = template.cloneNode(true);
          tr.classList.remove('clmns--template');
          this.updateFields(tr, 'clmns--playlist-track-info', info);

          if (track === this.calamansi.currentTrack()) {
            tr.classList.add('clmns--active');
          }

          tr.dataset.index = index;
          tr.addEventListener('click', function (event) {
            if (event.target.classList.contains('clmns--link')) {
              return;
            }

            var el = _this14.findElParent(event.target, 'clmns--playlist-item');

            _this14.calamansi.switchTrack(parseInt(el.dataset.index), true);
          });
          tbody.appendChild(tr);
          index++;
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
            _iterator4["return"]();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }

      table.appendChild(tbody);
    }
  }, {
    key: "updatePlaylistActiveTrack",
    value: function updatePlaylistActiveTrack() {
      var _this15 = this;

      this.getEls('.clmns--playlist-item.clmns--active').forEach(function (active) {
        active.classList.remove('clmns--active');

        var newActive = _this15.getEls('.clmns--playlist-item:not(.clmns--template)')[_this15.calamansi._currentTrack];

        if (newActive) {
          newActive.classList.add('clmns--active');
        }
      });
    }
  }, {
    key: "updateTrackInfo",
    value: function updateTrackInfo() {
      if (!this.calamansi.currentTrack() || !this.calamansi.currentTrack().info) {
        return;
      }

      var info = this.calamansi.currentTrack().info;
      this.updateFields(this.el, 'clmns--track-info', info);
    }
  }, {
    key: "updateFields",
    value: function updateFields(parent, className, values) {
      var _this16 = this;

      this.findEls(parent, ".".concat(className)).forEach(function (el) {
        var key = null;

        for (var i = 0; i < el.classList.length; i++) {
          if (new RegExp("".concat(className, "--.*")).test(el.classList[i])) {
            key = el.classList[i].split('--')[2];
            break;
          }
        }

        if (!key) {
          return;
        }

        if (el.classList.contains('clmns--link')) {
          el.setAttribute('href', values[key] ? values[key] : '#');
          el.style.visibility = values[key] ? 'visible' : 'collapse';
          return;
        }

        switch (key) {
          case 'albumCover':
            if (el.nodeName.toLowerCase() === 'img') {
              el.src = values[key] ? values[key].base64 : _this16.calamansi._options.defaultAlbumCover;
            } else {
              el.style.backgroundImage = "url('".concat(values[key] ? values[key].base64 : _this16.calamansi._options.defaultAlbumCover, "')");
            }

            break;

          case 'duration':
            el.innerHTML = values[key] ? _this16.formatTime(values[key]) : '&nbsp;';
            el.title = values[key] ? _this16.formatTime(values[key]) : '';
            break;

          default:
            el.innerHTML = values[key] ? values[key] : '&nbsp;';
            el.title = values[key] ? values[key] : '';
        }
      });
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.el.className = '';
      this.el.innerHTML = this.content;
    }
  }]);

  return CalamansiSkin;
}();

/* harmony default export */ __webpack_exports__["default"] = (CalamansiSkin);

/***/ }),

/***/ 0:
/*!*****************************************************!*\
  !*** multi ./src/calamansi.js ./src/calamansi.scss ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! /Users/colleengeohagan/LocalProjects/calamansi-js/src/calamansi.js */"./src/calamansi.js");
module.exports = __webpack_require__(/*! /Users/colleengeohagan/LocalProjects/calamansi-js/src/calamansi.scss */"./src/calamansi.scss");


/***/ })

/******/ });